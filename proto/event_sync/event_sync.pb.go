// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/event_sync/event_sync.proto

// import "proto/include/google/protobuf/any.proto";

package event_sync

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InstanceState int32

const (
	InstanceState_WAITING InstanceState = 0
	InstanceState_READY   InstanceState = 1
	InstanceState_BEGIN   InstanceState = 2
	InstanceState_DELAY   InstanceState = 3
	InstanceState_FINISH  InstanceState = 4
)

var InstanceState_name = map[int32]string{
	0: "WAITING",
	1: "READY",
	2: "BEGIN",
	3: "DELAY",
	4: "FINISH",
}

var InstanceState_value = map[string]int32{
	"WAITING": 0,
	"READY":   1,
	"BEGIN":   2,
	"DELAY":   3,
	"FINISH":  4,
}

func (x InstanceState) String() string {
	return proto.EnumName(InstanceState_name, int32(x))
}

func (InstanceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5cff40cac977f7df, []int{0}
}

type EventType int32

const (
	EventType_JOIN   EventType = 0
	EventType_LEAVE  EventType = 1
	EventType_NORMAL EventType = 2
)

var EventType_name = map[int32]string{
	0: "JOIN",
	1: "LEAVE",
	2: "NORMAL",
}

var EventType_value = map[string]int32{
	"JOIN":   0,
	"LEAVE":  1,
	"NORMAL": 2,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5cff40cac977f7df, []int{1}
}

type FindRequest struct {
	State                InstanceState `protobuf:"varint,1,opt,name=state,proto3,enum=event_sync.InstanceState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FindRequest) Reset()         { *m = FindRequest{} }
func (m *FindRequest) String() string { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()    {}
func (*FindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cff40cac977f7df, []int{0}
}

func (m *FindRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRequest.Unmarshal(m, b)
}
func (m *FindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRequest.Marshal(b, m, deterministic)
}
func (m *FindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRequest.Merge(m, src)
}
func (m *FindRequest) XXX_Size() int {
	return xxx_messageInfo_FindRequest.Size(m)
}
func (m *FindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRequest proto.InternalMessageInfo

func (m *FindRequest) GetState() InstanceState {
	if m != nil {
		return m.State
	}
	return InstanceState_WAITING
}

type ClientEventSyncMessage struct {
	InstanceId           string    `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	EventType            EventType `protobuf:"varint,2,opt,name=eventType,proto3,enum=event_sync.EventType" json:"eventType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ClientEventSyncMessage) Reset()         { *m = ClientEventSyncMessage{} }
func (m *ClientEventSyncMessage) String() string { return proto.CompactTextString(m) }
func (*ClientEventSyncMessage) ProtoMessage()    {}
func (*ClientEventSyncMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cff40cac977f7df, []int{1}
}

func (m *ClientEventSyncMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientEventSyncMessage.Unmarshal(m, b)
}
func (m *ClientEventSyncMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientEventSyncMessage.Marshal(b, m, deterministic)
}
func (m *ClientEventSyncMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientEventSyncMessage.Merge(m, src)
}
func (m *ClientEventSyncMessage) XXX_Size() int {
	return xxx_messageInfo_ClientEventSyncMessage.Size(m)
}
func (m *ClientEventSyncMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientEventSyncMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientEventSyncMessage proto.InternalMessageInfo

func (m *ClientEventSyncMessage) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *ClientEventSyncMessage) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_JOIN
}

type ServerEventSyncMessage struct {
	InstanceId           string        `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	EventType            EventType     `protobuf:"varint,2,opt,name=eventType,proto3,enum=event_sync.EventType" json:"eventType,omitempty"`
	State                InstanceState `protobuf:"varint,3,opt,name=state,proto3,enum=event_sync.InstanceState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServerEventSyncMessage) Reset()         { *m = ServerEventSyncMessage{} }
func (m *ServerEventSyncMessage) String() string { return proto.CompactTextString(m) }
func (*ServerEventSyncMessage) ProtoMessage()    {}
func (*ServerEventSyncMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cff40cac977f7df, []int{2}
}

func (m *ServerEventSyncMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerEventSyncMessage.Unmarshal(m, b)
}
func (m *ServerEventSyncMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerEventSyncMessage.Marshal(b, m, deterministic)
}
func (m *ServerEventSyncMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerEventSyncMessage.Merge(m, src)
}
func (m *ServerEventSyncMessage) XXX_Size() int {
	return xxx_messageInfo_ServerEventSyncMessage.Size(m)
}
func (m *ServerEventSyncMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerEventSyncMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServerEventSyncMessage proto.InternalMessageInfo

func (m *ServerEventSyncMessage) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *ServerEventSyncMessage) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_JOIN
}

func (m *ServerEventSyncMessage) GetState() InstanceState {
	if m != nil {
		return m.State
	}
	return InstanceState_WAITING
}

type FindEventSyncResult struct {
	InstanceIdArr        []string `protobuf:"bytes,1,rep,name=instanceIdArr,proto3" json:"instanceIdArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindEventSyncResult) Reset()         { *m = FindEventSyncResult{} }
func (m *FindEventSyncResult) String() string { return proto.CompactTextString(m) }
func (*FindEventSyncResult) ProtoMessage()    {}
func (*FindEventSyncResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cff40cac977f7df, []int{3}
}

func (m *FindEventSyncResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindEventSyncResult.Unmarshal(m, b)
}
func (m *FindEventSyncResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindEventSyncResult.Marshal(b, m, deterministic)
}
func (m *FindEventSyncResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindEventSyncResult.Merge(m, src)
}
func (m *FindEventSyncResult) XXX_Size() int {
	return xxx_messageInfo_FindEventSyncResult.Size(m)
}
func (m *FindEventSyncResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FindEventSyncResult.DiscardUnknown(m)
}

var xxx_messageInfo_FindEventSyncResult proto.InternalMessageInfo

func (m *FindEventSyncResult) GetInstanceIdArr() []string {
	if m != nil {
		return m.InstanceIdArr
	}
	return nil
}

func init() {
	proto.RegisterEnum("event_sync.InstanceState", InstanceState_name, InstanceState_value)
	proto.RegisterEnum("event_sync.EventType", EventType_name, EventType_value)
	proto.RegisterType((*FindRequest)(nil), "event_sync.FindRequest")
	proto.RegisterType((*ClientEventSyncMessage)(nil), "event_sync.ClientEventSyncMessage")
	proto.RegisterType((*ServerEventSyncMessage)(nil), "event_sync.ServerEventSyncMessage")
	proto.RegisterType((*FindEventSyncResult)(nil), "event_sync.FindEventSyncResult")
}

func init() { proto.RegisterFile("proto/event_sync/event_sync.proto", fileDescriptor_5cff40cac977f7df) }

var fileDescriptor_5cff40cac977f7df = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0x5d, 0x0b, 0x12, 0x41,
	0x14, 0x75, 0xfc, 0xaa, 0xbd, 0x62, 0x0c, 0x13, 0x9a, 0xf9, 0x50, 0xb6, 0xf4, 0x20, 0x12, 0x1a,
	0xfa, 0x18, 0x04, 0x5b, 0xae, 0x36, 0xb1, 0xae, 0x30, 0x2b, 0x85, 0x4f, 0x61, 0xeb, 0x2d, 0x16,
	0x6c, 0xb4, 0x9d, 0x51, 0xf0, 0xcf, 0xf4, 0x97, 0xfa, 0x4b, 0x31, 0x6b, 0xba, 0xa3, 0xf8, 0xd0,
	0x53, 0x6f, 0x97, 0x7b, 0xcf, 0x3d, 0xf7, 0xdc, 0xc3, 0x81, 0x17, 0xbb, 0x74, 0xab, 0xb7, 0x03,
	0x3c, 0xa0, 0xd4, 0x5f, 0xd4, 0x51, 0xc6, 0x56, 0xd9, 0xcf, 0x66, 0x0c, 0xf2, 0x8e, 0xfb, 0x16,
	0x6a, 0x93, 0x44, 0xae, 0x05, 0xfe, 0xdc, 0xa3, 0xd2, 0x6c, 0x00, 0x15, 0xa5, 0x57, 0x1a, 0x5b,
	0xa4, 0x43, 0xba, 0x8f, 0x86, 0x4f, 0xfb, 0xd6, 0x32, 0x97, 0x4a, 0xaf, 0x64, 0x8c, 0x91, 0x01,
	0x88, 0x13, 0xce, 0xfd, 0x01, 0xcd, 0xf7, 0x9b, 0x04, 0xa5, 0xf6, 0x0d, 0x30, 0x3a, 0xca, 0x78,
	0x86, 0x4a, 0xad, 0xbe, 0x23, 0x7b, 0x06, 0x90, 0xfc, 0xdd, 0xe0, 0xeb, 0x8c, 0xcf, 0x11, 0x56,
	0x87, 0x8d, 0xc0, 0xc9, 0xc8, 0x17, 0xc7, 0x1d, 0xb6, 0x8a, 0xd9, 0xb9, 0x86, 0x7d, 0xce, 0x3f,
	0x0f, 0x45, 0x8e, 0x73, 0x7f, 0x11, 0x68, 0x46, 0x98, 0x1e, 0x30, 0xfd, 0x2f, 0xf7, 0x72, 0x3f,
	0x4a, 0xff, 0xe8, 0xc7, 0x1b, 0x78, 0x6c, 0xfc, 0xbc, 0xa8, 0x13, 0xa8, 0xf6, 0x1b, 0xcd, 0x5e,
	0x42, 0x3d, 0x97, 0xe2, 0xa5, 0x69, 0x8b, 0x74, 0x4a, 0x5d, 0x47, 0x5c, 0x37, 0x7b, 0x1c, 0xea,
	0x57, 0xa4, 0xac, 0x06, 0x0f, 0x3e, 0x7b, 0x7c, 0xc1, 0xc3, 0x29, 0x2d, 0x30, 0x07, 0x2a, 0xc2,
	0xf7, 0xc6, 0x4b, 0x4a, 0x4c, 0xf9, 0xce, 0x9f, 0xf2, 0x90, 0x16, 0x4d, 0x39, 0xf6, 0x03, 0x6f,
	0x49, 0x4b, 0x0c, 0xa0, 0x3a, 0xe1, 0x21, 0x8f, 0x3e, 0xd0, 0x72, 0xef, 0x15, 0x38, 0x97, 0x87,
	0xd8, 0x43, 0x28, 0x7f, 0x9c, 0xf3, 0xf0, 0xc4, 0x11, 0xf8, 0xde, 0x27, 0x9f, 0x12, 0x83, 0x0e,
	0xe7, 0x62, 0xe6, 0x05, 0xb4, 0x38, 0xfc, 0x4d, 0x80, 0x5e, 0x24, 0x1b, 0x7f, 0x93, 0x18, 0x59,
	0x04, 0x0d, 0xf3, 0x4a, 0x14, 0xa3, 0xc4, 0xb3, 0xac, 0x20, 0x51, 0x9a, 0x3d, 0xb1, 0x5d, 0xb0,
	0xd2, 0xd3, 0x7e, 0x7e, 0x3b, 0xb8, 0xb1, 0xc1, 0x2d, 0xb0, 0x6f, 0xd0, 0xcc, 0x0f, 0xd9, 0xcc,
	0xcc, 0xb5, 0x97, 0xef, 0x67, 0xaa, 0x7d, 0x85, 0xb9, 0x9f, 0x03, 0xb7, 0xd0, 0x25, 0xaf, 0xc9,
	0xd7, 0x6a, 0x16, 0xf5, 0xd1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x84, 0x9b, 0x1f, 0x70, 0x0f,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventSyncServiceClient is the client API for EventSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventSyncServiceClient interface {
	// your model Requests
	FindSceneInstanceList(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindEventSyncResult, error)
	EventSyncSceneInstance(ctx context.Context, opts ...grpc.CallOption) (EventSyncService_EventSyncSceneInstanceClient, error)
}

type eventSyncServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventSyncServiceClient(cc *grpc.ClientConn) EventSyncServiceClient {
	return &eventSyncServiceClient{cc}
}

func (c *eventSyncServiceClient) FindSceneInstanceList(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindEventSyncResult, error) {
	out := new(FindEventSyncResult)
	err := c.cc.Invoke(ctx, "/event_sync.EventSyncService/FindSceneInstanceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSyncServiceClient) EventSyncSceneInstance(ctx context.Context, opts ...grpc.CallOption) (EventSyncService_EventSyncSceneInstanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventSyncService_serviceDesc.Streams[0], "/event_sync.EventSyncService/EventSyncSceneInstance", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventSyncServiceEventSyncSceneInstanceClient{stream}
	return x, nil
}

type EventSyncService_EventSyncSceneInstanceClient interface {
	Send(*ClientEventSyncMessage) error
	Recv() (*ServerEventSyncMessage, error)
	grpc.ClientStream
}

type eventSyncServiceEventSyncSceneInstanceClient struct {
	grpc.ClientStream
}

func (x *eventSyncServiceEventSyncSceneInstanceClient) Send(m *ClientEventSyncMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventSyncServiceEventSyncSceneInstanceClient) Recv() (*ServerEventSyncMessage, error) {
	m := new(ServerEventSyncMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventSyncServiceServer is the server API for EventSyncService service.
type EventSyncServiceServer interface {
	// your model Requests
	FindSceneInstanceList(context.Context, *FindRequest) (*FindEventSyncResult, error)
	EventSyncSceneInstance(EventSyncService_EventSyncSceneInstanceServer) error
}

// UnimplementedEventSyncServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventSyncServiceServer struct {
}

func (*UnimplementedEventSyncServiceServer) FindSceneInstanceList(ctx context.Context, req *FindRequest) (*FindEventSyncResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSceneInstanceList not implemented")
}
func (*UnimplementedEventSyncServiceServer) EventSyncSceneInstance(srv EventSyncService_EventSyncSceneInstanceServer) error {
	return status.Errorf(codes.Unimplemented, "method EventSyncSceneInstance not implemented")
}

func RegisterEventSyncServiceServer(s *grpc.Server, srv EventSyncServiceServer) {
	s.RegisterService(&_EventSyncService_serviceDesc, srv)
}

func _EventSyncService_FindSceneInstanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSyncServiceServer).FindSceneInstanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_sync.EventSyncService/FindSceneInstanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSyncServiceServer).FindSceneInstanceList(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSyncService_EventSyncSceneInstance_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventSyncServiceServer).EventSyncSceneInstance(&eventSyncServiceEventSyncSceneInstanceServer{stream})
}

type EventSyncService_EventSyncSceneInstanceServer interface {
	Send(*ServerEventSyncMessage) error
	Recv() (*ClientEventSyncMessage, error)
	grpc.ServerStream
}

type eventSyncServiceEventSyncSceneInstanceServer struct {
	grpc.ServerStream
}

func (x *eventSyncServiceEventSyncSceneInstanceServer) Send(m *ServerEventSyncMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventSyncServiceEventSyncSceneInstanceServer) Recv() (*ClientEventSyncMessage, error) {
	m := new(ClientEventSyncMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventSyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event_sync.EventSyncService",
	HandlerType: (*EventSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSceneInstanceList",
			Handler:    _EventSyncService_FindSceneInstanceList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventSyncSceneInstance",
			Handler:       _EventSyncService_EventSyncSceneInstance_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/event_sync/event_sync.proto",
}
